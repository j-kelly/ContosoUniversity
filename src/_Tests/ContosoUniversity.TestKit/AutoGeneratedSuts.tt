<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(ProjectDir)\bin\debug\ContosoUniversity.Core.dll" #>
<#@ assembly name="$(ProjectDir)\bin\debug\ContosoUniversity.Web.Core.dll" #>
<#@ assembly name="$(ProjectDir)\bin\debug\ContosoUniversity.Web.Mvc.dll" #>
<#@ assembly name="$(ProjectDir)\bin\debug\ContosoUniversity.Domain.Core.dll" #>
<#@ assembly name="$(ProjectDir)\bin\debug\ContosoUniversity.Domain.AppServices.dll" #>
<#@ assembly name="$(ProjectDir)..\..\packages\Microsoft.AspNet.Mvc.5.2.3\lib\net45\System.Web.Mvc.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="ContosoUniversity.Core.Annotations" #>
<#@ output extension=".cs" #>
<#
	var assemblies = new []
	{
		typeof(ContosoUniversity.Domain.AppServices.ServiceBehaviours.CourseHandlers).Assembly,
		typeof(ContosoUniversity.Web.Mvc.Features.Course.CourseController).Assembly,
	};
try
{
	var types = new List<Type>() ;
    assemblies.ToList().ForEach(p => types.AddRange(p.GetTypes()));
 
 	var items = (from a in types
                           from b in a.GetCustomAttributes(false).OfType<GenerateTestFactoryAttribute>()
				select a).ToList();
#>// <auto-generated />
/* ************************************************************
 * 
 * 
 * AUTO GENERERATED - DO NOT ALTER
 * 
 * 
 * ************************************************************/ 
namespace ContosoUniversity.TestKit.Factories
{
	using Moq;
<# 
	var namespaceList = new Dictionary<string, string>();
	items.ForEach(type =>
	{
		namespaceList[type.Namespace] = type.Namespace;
		type.GetConstructors().First().GetParameters().ToList().ForEach(param => { namespaceList[param.ParameterType.Namespace] = param.ParameterType.Namespace; });
	});
#>
<# 
	var sortedNamesapces = namespaceList.Values.ToList();
	sortedNamesapces.Sort();
	sortedNamesapces.ForEach(name => {#>
	using <#= name #>;
<#});#>
<# items.ForEach(type =>{ #>

    // Auto generated
	public partial class <#= type.Name #>Factory
	{
		private readonly MockBehavior _MockBehaviour;

	    public <#= type.Name #>Factory()
            : this(MockBehavior.Default)
        {
        }

        public <#= type.Name #>Factory(MockBehavior mockBehaviour)
        {
            _MockBehaviour = mockBehaviour;
			
		<# type.GetConstructors().First().GetParameters().ToList().ForEach(param => {#>
	<#= param.ParameterType.Name.Substring(1) #>Mock = new Mock<<#= param.ParameterType.Name #>>(_MockBehaviour);
		<#});#>

			Initalise();
		}

		partial void Initalise();

	<# type.GetConstructors().First().GetParameters().ToList().ForEach(param => {#>
	// <#= param.ParameterType.Name #>
		private <#= param.ParameterType.Name #> _<#= param.ParameterType.Name #>;
        public Mock<<#= param.ParameterType.Name #>> <#= param.ParameterType.Name.Substring(1) #>Mock { get; set; }
<#  /* GET AND SET METHODS ARE USED HERE TO DECLUTTER INTELLIESENSE WHEN SETTING UP THE MOCKS */#>
        public <#= param.ParameterType.Name #> _Get<#= param.ParameterType.Name.Substring(1) #>() { return _<#= param.ParameterType.Name #> ?? <#= param.ParameterType.Name.Substring(1) #>Mock.Object; }
	    public <#= param.ParameterType.Name #> _Set<#= param.ParameterType.Name.Substring(1) #>(<#= param.ParameterType.Name #> obj){ _<#= param.ParameterType.Name #> = obj; return obj;}

	<#});#>
    public <#= type.Name #>  Object
        {
            get
            {
                return new <#= type.Name #>(<#= string.Join(", ", type.GetConstructors().First().GetParameters().Select(p => string.Format("_Get{0}()",p.ParameterType.Name.Substring(1)))) #>);
			}
        }

		public void VerifyAll()
		{
<# type.GetConstructors().First().GetParameters().ToList().ForEach(param => {#>
			<#= param.ParameterType.Name.Substring(1) #>Mock.VerifyAll();
<#});#>		}
	}

<#});#>
}
<#
}
catch (ReflectionTypeLoadException ex)
{ #> 

 Exception thrown: <#= ex.ToString() + Environment.NewLine #> 

 Loader Exceptions: <# 
 foreach(var p in ex.LoaderExceptions)
 {#>
 	 <#= p.ToString() + Environment.NewLine#>

  <#}
#><#}
catch(Exception ex)
{
#>Exception thrown: <#= ex.ToString() #> 

<#}#>